{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "585e141d",
   "metadata": {},
   "source": [
    "# Wee 3: Obtaining Data for Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8631a29e",
   "metadata": {},
   "source": [
    "\n",
    "In this notebook, we will explore three methods of obtaining data in Python, which you can later use for data visualization purposes:\n",
    "1. Typing Data Directly\n",
    "2. Using NumPy\n",
    "3. Reading from an External File with Pandas\n",
    "4. Fetching Data from an API\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0488c1ce",
   "metadata": {},
   "source": [
    "## 1. Typing Data Directly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af0a094e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Example of typing data directly\n",
    "x = [1, 2, 3, 4, 5]\n",
    "y = [10, 20, 30, 40, 50]\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42aa751b",
   "metadata": {},
   "source": [
    "## 2. Using NumPy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00be1800",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Creating a simple array\n",
    "array = np.array([1, 2, 3, 4, 5])\n",
    "\n",
    "# Generating a range of numbers\n",
    "range_array = np.arange(0, 10, 2) # Start, Stop, Step\n",
    "\n",
    "# Generating random data\n",
    "random_array = np.random.rand(5) # 5 random numbers between 0 and 1\n",
    "\n",
    "# Generating random integers\n",
    "random_integers = np.random.randint(0, 100, 5) # Start, Stop, Number of values\n",
    "\n",
    "# Generating numbers from a normal distribution\n",
    "normal_distribution = np.random.normal(0, 1, 1000) # Mean, Standard deviation, Number of values\n",
    "\n",
    "# Generating numbers from a uniform distribution\n",
    "uniform_distribution = np.random.uniform(0, 10, 1000) # Lower bound, Upper bound, Number of values\n",
    "\n",
    "# Generate a sequence of 1000 evenly spaced numbers from 0 to 2π\n",
    "#linespace is very useful, since \n",
    "x = np.linspace(0, 2 * np.pi, 1000)\n",
    "\n",
    "# Calculate the sine of these numbers\n",
    "y1 = np.sin(x)\n",
    "# Plot the sine and cosine waves\n",
    "plt.plot(x, y1, label='sin(x)')\n",
    "plt.title('Sine  Waves')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d28adb9",
   "metadata": {},
   "source": [
    "## Task 1: Plotting Sine and Cosine Curves\n",
    "\n",
    "In the following exercise, you are tasked with generating a graph that simultaneously displays both the `sin(x)` and `cos(x)` functions. Please adhere to the guidelines below to ensure your graph meets the specified requirements:\n",
    "\n",
    "### Requirements:\n",
    "- **Function Domain:** The graph should cover the domain from `-2π` to `2π`. This range ensures that the periodic nature of both functions is adequately represented.\n",
    "- **Labels and Title:** Each axis should be clearly labeled to indicate what it represents. Specifically, label the horizontal axis as 'x' and the vertical axis as 'y'. Additionally, the graph must include a title that succinctly describes its contents.\n",
    "- **Styling:** Avoid using the default styles provided by the plotting library. Instead, choose distinct colors and line styles for the `sin(x)` and `cos(x)` plots to enhance visual differentiation.\n",
    "- **Legend:** Incorporate a legend into the graph to identify which curve represents `sin(x)` and which represents `cos(x)`. Ensure the legend is placed in a position that does not obstruct any part of the curves.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbdbef4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## your code for task 1 should be here. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abfd44a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "\n",
    "# Generate random numbers from a normal distribution\n",
    "data = np.random.normal(0, 1, 1000)\n",
    "\n",
    "# Plot histogram\n",
    "plt.hist(data,bins=30)\n",
    "plt.show()\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daaa2e8e",
   "metadata": {},
   "source": [
    "## Task 2: Enhancing a Histogram of Normal Distribution Data\n",
    "\n",
    "Given the initial Python code that generates random numbers from a normal distribution and plots a histogram, your task is to enhance and analyze this histogram. Follow the instructions below to modify the existing code and explore the characteristics of the normal distribution.\n",
    "\n",
    "### Instructions:\n",
    "\n",
    "1. **Modify Bin Count:** Experiment with the `bins` parameter by choosing at least two different values other than 30. Observe how the histogram's appearance changes with more or fewer bins. \n",
    "\n",
    "2. **Add Titles and Labels:** Improve the readability of the plot by adding an appropriate title to the histogram. Also, label the x-axis as 'Value' and the y-axis as 'Frequency'. \n",
    "\n",
    "3. **Apply Different Color:** Change the color of the histogram bars to something other than the default. You may choose any color that you find visually appealing.\n",
    "\n",
    "4. **Include Mean Line:** Calculate the mean of the `data` array and draw a vertical line on the histogram at the mean value. Use a contrasting color for the line and include a legend to indicate that this line represents the mean.\n",
    "\n",
    "5. **Answer Reflection Questions:**\n",
    "   - How does changing the number of bins affect the histogram's appearance and interpretation?\n",
    "   - What can you infer about the distribution of data from the histogram and the mean line?\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a714ca1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your code for Task 2 should be here"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c63552c8",
   "metadata": {},
   "source": [
    "## 3. Reading from an External File with Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bcd68c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import pandas as pd\n",
    "\n",
    "# File path\n",
    "file_path = 'data.csv'\n",
    "\n",
    "# Reading the CSV file\n",
    "data = pd.read_csv(file_path)\n",
    "\n",
    "# Displaying the first few rows of the dataframe\n",
    "print(data.head())\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9df563b",
   "metadata": {},
   "source": [
    "## Task 3: Data Analysis with Pandas from Multiple Sources\n",
    "\n",
    "In this task, you are required to perform data manipulation and analysis using the pandas library on datasets from two sources: a local file and a remote file hosted online. This will introduce you to handling data in different formats and from various sources.\n",
    "\n",
    "### Instructions:\n",
    "\n",
    "1. **Local Data Exploration:**\n",
    "   - Use the provided code snippet to read a local CSV file into a DataFrame. Display the first 10 rows and use the `.info()` method to summarize the DataFrame.\n",
    "   - File path for local data: `'data.csv'` (This file should be in your dataset repository).\n",
    "\n",
    "2. **Remote Data Handling:**\n",
    "   - Read a CSV file into a DataFrame directly from a URL. You can use the following example URL for a dataset: `https://example.com/data.csv` (Replace this URL with the actual URL of the dataset you wish to use).\n",
    "   - Display the summary information and the first few rows of this remote DataFrame as well.\n",
    "\n",
    "3. **Combined Data Analysis:**\n",
    "   - Choose one numerical column from each DataFrame and calculate its mean, median, and standard deviation.\n",
    "   - For a categorical column in each DataFrame, count the frequency of each category.\n",
    "\n",
    "4. **Visualization (Optional):**\n",
    "    - For each dataset choose a reasonalbe plot ( bar, plot or histogram).  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "16096b6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Your code for Task 3 should be here"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f84019f",
   "metadata": {},
   "source": [
    "## 4. Fetching Data from an API"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f4d1e66",
   "metadata": {},
   "source": [
    "\n",
    "This is more advance, we will do it in future!    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "936ec68a",
   "metadata": {},
   "source": [
    "\n",
    "### Task 3: Visualization with Data from a CSV File (Using Pandas)\n",
    "1. **Line Plot from CSV Data**: Create a line plot using two selected columns from your CSV data. Add a title, axis labels, and grid.\n",
    "2. **Bar Graph from CSV Data**: Create a bar graph to compare values in two selected columns from your CSV data. Add a title, axis labels.\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "243f55ca",
   "metadata": {},
   "source": [
    "## Resources\n",
    "\n",
    "For further exploration and to deepen your understanding of the capabilities offered by NumPy, please consult the following official documentation resources:\n",
    "\n",
    "- [NumPy Random Generator Documentation](https://numpy.org/doc/stable/reference/random/generator.html) - A comprehensive guide to generating random data with NumPy, covering various functionalities of the random number generator.\n",
    "\n",
    "- [NumPy Mathematical Functions](https://numpy.org/doc/stable/reference/routines.math.html) - Detailed documentation on the mathematical functions available in NumPy. This resource is invaluable for understanding the wide range of mathematical operations you can perform with NumPy.\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
